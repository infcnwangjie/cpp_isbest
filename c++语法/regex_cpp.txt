#include<regex>


void test_regex(){
    std::string pattern{ "\\d{3}-\\d{8}|\\d{4}-\\d{7}" }; // fixed telephone
    std::regex re(pattern);

    bool ret = std::regex_match("010-12345678", re);
    cout<<"010-12345678 match regex \\d{3}-\\d{8}|\\d{4}-\\d{7} :"<<ret<<endl;


    std::regex pattern1("\\d{4}");
    std::string content("hello_2018");
    std::smatch result;
    if (std::regex_match(content, result, pattern1)) {
        std::cout << result[0]<<endl;
    }


    std::regex pattern2("\\d{4}");
    std::string content2("hello_2018 by_2017");
    std::smatch result2;
    //匹配任意一个子串，匹配到就返回，result2[1]是空，说明仅有一个对象
    if (std::regex_search(content2, result2, pattern2)) {
        std::cout << result2[0]<<endl;
        std::cout << result2[1]<<endl;
    }

    std::regex pattern3("\\d{4}");
    std::string content3("hello_2018 by_2017");

    std::string result3 = std::regex_replace(content3, pattern3, "everyone");
    std::cout << result3<<endl;

    //当匹配多个，并且返回多个，只能用sregex_token_iterator
    string str = "boq@yahoo.com, boqian@gmail.com; bo@hotmail.com";

    //regex e("[[:punct:]]+");  // 空格，数字，字母以外的可打印字符
    //regex e("[ [:punct:]]+");
    regex e("([[:w:]]+)@([[:w:]]+)\.com");

    sregex_token_iterator pos(str.cbegin(), str.cend(), e, 0);    //最后一个参数指定打印匹配结果的哪一部分，0表达整个匹配字符串，1表示第1个子串，-1表示没有匹配的部分
    sregex_token_iterator end;  // 默认构造定义了past-the-end迭代器
    for (; pos!=end; pos++) {
        cout << "Matched:  " << *pos << endl;
    }
    cout << "=============================\n\n";


    //当匹配多个，并且返回多个，只能用sregex_token_iterator
    std::string str1("hello_2018 by_2017");

    regex e1("\\d{4}");

    sregex_iterator pos1(str1.cbegin(), str1.cend(), e1);    //最后一个参数指定打印匹配结果的哪一部分，0表达整个匹配字符串，1表示第1个子串，-1表示没有匹配的部分
    sregex_iterator end1;  // 默认构造定义了past-the-end迭代器
    for (; pos1!=end1; pos1++) {
        cout << "Matched:  " << pos1->str(0) << endl;
    }
    cout << "=============================\n\n";


}