c++同时支持模块以及include语法，对于老的.h文件，可以用import 导入，但是对于宏定义问题，需要嵌套导入，参照本目录的《C++20的模块对老式头文件的兼容性与提升》文章。

以后如果非特殊情况，在c++20版本中就不用写.h文件，使用cpp文件即可。
基本语法
如果我们希望声明一个模块，可以用如下的语法

export module example; //声明一个模块名字为example
export int add(int first, int second) { //可以导出的函数
    return first + second;
}
因为我们丢弃了头文件的方法，可以将该模块定义保存在example.cppm的文件中。这里的cppm后缀用于告诉编译器这是一个模块定义文件。

假设我们希望使用该模块，则用如下的代码

import example; //导入上述定义的模块
int main() {
    add(1, 2); //调用example模块中的函数
}
分离模块接口和实现

如果我们想分离模块的声明和实现，将他们放在不同的文件中，这样更符合传统的接口定义和实现分离的编写代码方法（其实可以看作是C++比Java更干净的一个地方），我们可以对上面的example.cppm做如下的修改

export module example;
extern int add(int first, int second);
然后创建一个源代码文件，放置模块函数的实现

module example; //当前模块是example
int add(int first, int second) {
    return first + second;
}
出于灵活起见，C++20支持将一个模块中声明的函数放在多个模块实现单元中分别实现，这样更容易实现干净的代码，并提高编译速度。

隔离权限指定

模块访问权是通过export声明来指定的，没有声明的类或者函数等默认是不能被外部代码访问的；基于声明的语法也决定了如果分离声明和实现，可见性在实现单元中其实是忽略的。

为了避免代码变得过于啰嗦，语法层面上也支持通过括号作用于一次性声明多个导出函数或者类，比如

export module example;
export {
    void doSth();
    int doAnother(auto x, auto y);
}
void internalImpl(); //外部不可访问
模块和namespace是正交的语言设施

旧的C++标准早就支持通过namespace来实现信息封装和隔离，而新的module机制可以和namespace结合使用，提供清晰的隔离结构，比如

export module example;
export namespace name {
    void doSth();
    int doAnother(auto x, auto y);
}
语言机制上提供了灵活的手段，但是程序员却要自己做好权衡，保持模块的粒度适中，匹配实际的应用场景。

模块重新导出

实际应用中，复杂的软件项目可能有很多形形色色的模块，它们可能处于不同的抽象单元；和应用代码比较近的上层模块可能需要将某些它自己可见的模块开放给上层代码直接使用，提供重新导出的功能可以极大地提高信息封装的能力，提高模块的内聚度减少不必要的耦合。

一个简单的方法就是将import的部分重新放在export块中，即下面的代码例子

export module mid;
export {
    import low_module1;
    import low_module2;
    void myFunc(auto x);
}
